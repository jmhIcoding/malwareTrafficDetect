#coding:utf8
#IPC通信的基本模块
__author__ = 'jmh081701'
import mmap
import sys
import time
import os
import define
class IPC_MemoryMap(object):
    def __init__(self,mapFile_name=define.MAPFILENAME):
        try:
            self.file=os.open(mapFile_name,os.O_RDWR)
        except:
            self.file=os.open(mapFile_name,os.O_RDWR|os.O_CREAT)
        print(os.path.getsize(define.MAPFILENAME))
        if os.path.getsize(define.MAPFILENAME) < define.max_map_size:
            for i in range(define.max_map_size):
                os.write(self.file,b'\x00')
        self.memory=mmap.mmap(self.file,length=0,access=mmap.ACCESS_WRITE|mmap.ACCESS_READ,tagname=define.tag_name)
    def read(self,byte_num,offset=None):
        if not offset:
            offset=os.SEEK_SET
        self.memory.seek(offset)
        return self.memory.read(byte_num)
    def __del__(self):
        self.memory.close()
        os.close(self.file)

ipc=IPC_MemoryMap()
data=ipc.read(6)
while True:
    print(ipc.read(1)[0])
    time.sleep(1)
print(ipc.read(6))